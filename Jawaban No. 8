//2802685516_Sashi Kirana Sekar Irawan
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_MHS 100
#define FILE_NAME "file.txt"

typedef struct {
    char nim[11];   // 10 digit + null terminator
    char nama[21];  // max 20 karakter + null terminator
    int nilai;      // 0 - 9
} Mahasiswa;

Mahasiswa data[MAX_MHS];
int jumlah = 0;

void bacaFile() {
    FILE *fp = fopen(FILE_NAME, "r");
    if (!fp) {
        printf("File tidak ditemukan, akan dibuat baru saat save.\n");
        return;
    }
    while (fscanf(fp, "%10s", data[jumlah].nim) == 1) {
        fgetc(fp); // buang spasi
        fgets(data[jumlah].nama, sizeof(data[jumlah].nama), fp);
        // cari nilai di akhir nama
        char *ptr = strrchr(data[jumlah].nama, ' ');
        if (ptr) {
            *ptr = '\0';
            data[jumlah].nilai = atoi(ptr + 1); //atoi adalah ASCII to integer
        }
        // hapus newline di nama
        data[jumlah].nama[strcspn(data[jumlah].nama, "\n")] = '\0';
        jumlah++;
    }
    fclose(fp);
}

void tampilkanData() {
    printf("\n%-12s %-20s %-5s\n", "NIM", "Nama", "Nilai");
    printf("---------------------------------------------\n");
    for (int i = 0; i < jumlah; i++) {
        printf("%-12s %-20s %-5d\n", data[i].nim, data[i].nama, data[i].nilai);
    }
}

int compareNimAsc(const void *a, const void *b) {
    return strcmp(((Mahasiswa*)a)->nim, ((Mahasiswa*)b)->nim);
}

void sortingNimAsc() {
    qsort(data, jumlah, sizeof(Mahasiswa), compareNimAsc);
    printf("\nData setelah sorting NIM ascending:\n");
    tampilkanData();
}

int compareNilaiDesc(const void *a, const void *b) {
    return ((Mahasiswa*)b)->nilai - ((Mahasiswa*)a)->nilai;
}
void sortingNilaiDesc() {
    qsort(data, jumlah, sizeof(Mahasiswa), compareNilaiDesc);
    printf("\nData setelah sorting Nilai descending:\n");
    tampilkanData();
}

int validasiNIM(char nim[]) {
    if (strlen(nim) != 10) return 0;
    for (int i = 0; i < 10; i++) {
        if (!isdigit(nim[i])) return 0;
    }
    return 1;
}

int validasiNama(char nama[]) {
    int len = strlen(nama);
    return (len >= 3 && len <= 20);
}

int validasiNilai(int nilai) {
    return (nilai >= 0 && nilai <= 9);
}

void clearBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void tambahData() {
    if (jumlah >= MAX_MHS) {
        printf("Data penuh!\n");
        return;
    }
    Mahasiswa m;
    // Input NIM
    do {
        printf("Masukkan NIM (10 digit angka): ");
        scanf("%10s", m.nim);
        clearBuffer();
        if (!validasiNIM(m.nim)) {
            printf("NIM tidak valid!\n");
        }
    } while (!validasiNIM(m.nim));

    // Input Nama
    do {
        printf("Masukkan Nama (3-20 karakter, boleh spasi): ");
        fgets(m.nama, sizeof(m.nama), stdin);
        m.nama[strcspn(m.nama, "\n")] = '\0';
        if (!validasiNama(m.nama)) {
            printf("Nama tidak valid!\n");
        }
    } while (!validasiNama(m.nama));

    // Input Nilai
    do {
        printf("Masukkan Nilai (0-9): ");
        scanf("%d", &m.nilai);
        clearBuffer();
        if (!validasiNilai(m.nilai)) {
            printf("Nilai tidak valid!\n");
        }
    } while (!validasiNilai(m.nilai));

    data[jumlah++] = m;
    printf("Data berhasil ditambahkan.\n");
}

void simpanFile() {
    FILE *fp = fopen(FILE_NAME, "w");
    if (!fp) {
        printf("Gagal menyimpan file.\n");
        return;
    }
    for (int i = 0; i < jumlah; i++) {
        fprintf(fp, "%s %s %d\n", data[i].nim, data[i].nama, data[i].nilai);
    }
    fclose(fp);
    printf("Data berhasil disimpan ke %s\n", FILE_NAME);
}

int main() {
    int pilihan;
    bacaFile();
    printf("\nProgram Entri Nilai\n");
    tampilkanData();

    do {
        printf("\nMenu:\n");
        printf("1. Sorting NIM Ascending\n");
        printf("2. Sorting Nilai Descending\n");
        printf("3. Tambah Data\n");
        printf("4. Keluar & Simpan ke File\n");
        printf("Pilihan: ");
        scanf("%d", &pilihan);
        clearBuffer();

        switch (pilihan) {
            case 1:
                sortingNimAsc();
                break;
            case 2:
                sortingNilaiDesc();
                break;
            case 3:
                tambahData();
                break;
            case 4:
                simpanFile();
                printf("Program selesai.\n");
                break;
            default:
                printf("Pilihan tidak valid.\n");
        }
    } while (pilihan != 4);

    return 0;
}
